import {defineConfig} from 'sanity'
import {StructureBuilder, structureTool} from 'sanity/structure'
import {visionTool} from '@sanity/vision'
import {muxInput} from 'sanity-plugin-mux-input'
import {sanityComputedField} from 'sanity-plugin-computed-field'
import {schemaTypes} from './schema/index'
import {IoSettingsOutline} from 'react-icons/io5'

const singletonTypes: Set<string> = new Set([])

const singletonActions = new Set(['publish', 'discardChanges', 'restore'])

const singletonListItem = (S: StructureBuilder, typeName: string, title?: string) =>
  S.listItem()
    .title(title || typeName)
    .id(typeName)
    .child(S.document().schemaType(typeName).documentId(typeName))

export default defineConfig({
  name: 'default',
  title: 'Debug',

  projectId: 'rp2u47wy',
  dataset: 'production',

  basePath: '/admin',

  plugins: [
    structureTool({
      structure: (S) =>
        S.list()
          .title('Content')
          .items([singletonListItem(S, 'test', 'Test').icon(IoSettingsOutline)]),
    }),
    visionTool(),
    muxInput({
      encoding_tier: 'smart',
      mp4_support: 'standard',
      max_resolution_tier: '2160p',
      defaultSigned: false,
      disableUploadConfig: true,
      disableTextTrackConfig: true,
      defaultAutogeneratedSubtitleLangs: ['en'],
    }),
    sanityComputedField(),
  ],

  schema: {
    types: schemaTypes,

    // Filter out singleton types from the global “New document” menu options
    templates: (templates) => templates.filter(({schemaType}) => !singletonTypes.has(schemaType)),
  },

  document: {
    // For singleton types, filter out actions that are not explicitly included
    // in the `singletonActions` list defined above
    actions: (input, context) =>
      singletonTypes.has(context.schemaType)
        ? input.filter(({action}) => action && singletonActions.has(action))
        : input,
  },
})
